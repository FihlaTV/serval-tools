#!/usr/bin/env python

'''Usage:
    mantis2github [options] mantis version
    mantis2github [options] mantis wsdl
    mantis2github [options] mantis list projects
    mantis2github [options] mantis list issues [<project-id>] [-F|--fixed] [-O|--open]
    mantis2github [options] mantis dump project <project-id>
    mantis2github [options] mantis dump issue <issue-id>
    mantis2github [options] github list repos
    mantis2github -h | --help
    mantis2github --version
Options:
    -h --help               Show this message
    --version               Show version and exit
    -D --debug              Enable debug logging
    --config=PATH           Read config file [default: $HOME/.mantis2github]
    --mantis-url=URL        Connect to Mantis SOAP service at this URL (default taken from
                            $SERVAL_MANTIS_URL/api/soap/mantisconnect.php if set, or config file)
    --mantis-user=USER      Connect to Mantis with this user name (use config file for better security)
    --mantis-password=PASS  Connect to Mantis with this password (use config file for better security)
    --github-user=USER      Connect to GitHub with this user name (use config file for better security)
    --github-password=PASS  Connect to GitHub with this password (use config file for better security)
    --per-page=N            Fetch issues N entries per page [default: 100]
    -F --fixed              When listing issues, only include issues resolved as "fixed"
    -O --open               When listing issues, only include issues resolved as "open" or "reopened"

The config file may contain a single "mantis=username:password" line, and is ignored
unless it is owned by the caller and has permissions at most 0600.
'''

import sys
import os
import os.path
import logging
import ConfigParser
import suds
import urllib2

def main():
    logging.basicConfig(level=logging.INFO)
    logging.getLogger('suds').setLevel(logging.CRITICAL)
    sys.path.append(os.path.join(serval_tools_root(), "python/docopt"))
    sys.path.append(os.path.join(serval_tools_root(), "python/PyGithub"))
    import docopt
    import github
    opts = docopt.docopt(__doc__, version='0.1')
    #print opts
    if opts['--debug']:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.getLogger('suds').setLevel(logging.INFO)
    config = read_config_file(os.path.expanduser(os.path.expandvars(opts['--config'])))
    mantis_url = opts['--mantis-url']
    if not mantis_url:
        mantis_url = config.mantis_url or os.environ.get('SERVAL_MANTIS_URL')
        if mantis_url:
            mantis_url += '/api/soap/mantisconnect.php'
    mantis_user = opts['--mantis-user'] or config.mantis_user
    mantis_password = opts['--mantis-password'] or config.mantis_password
    github_user = opts['--github-user'] or config.github_user
    github_password = opts['--github-password'] or config.github_password
    if opts['mantis']:
        if mantis_url is None:
            fatal("missing Mantis URL")
        try:
            mc = suds.client.Client(mantis_url + '?wsdl')
            if opts['version']:
                print soap_service(mc, 'mc_version')
            if opts['wsdl']:
                print mc
            if mantis_user is None:
                fatal("missing Mantis user name")
            if mantis_password is None:
                fatal("missing Mantis password")
            clientopts={}
            clientopts['username'] = mantis_user
            clientopts['password'] = mantis_password
            if opts['list'] and opts['projects']:
                projects = soap_service(mc, 'mc_projects_get_user_accessible', **clientopts)
                projects.sort(key=lambda p: p.id)
                for project in projects:
                    print '%-5s %-15s %-15s %-40s' % (project.id, project.status.name, project.view_state.name, project.name)
            if opts['dump'] and opts['project']:
                try:
                    project_id = int(opts['<project-id>'])
                except ValueError:
                    fatal('invalid <project-id>')
                projects = soap_service(mc, 'mc_projects_get_user_accessible', **clientopts)
                for project in projects:
                    if project.id == project_id:
                        print project
            if opts['list'] and opts['issues']:
                project_ids = []
                if opts['<project-id>']:
                    try:
                        project_ids.append(int(opts['<project-id>']))
                    except ValueError:
                        fatal('invalid <project-id>')
                if not project_ids:
                    projects = soap_service(mc, 'mc_projects_get_user_accessible', **clientopts)
                    for project in projects:
                        project_ids.append(project.id)
                try:
                    per_page = int(opts['--per-page'])
                except ValueError:
                    fatal('invalid value for --per-page option')
                all_issues = []
                for project_id in project_ids:
                    page = 1
                    while True:
                        issues = soap_service(mc, 'mc_project_get_issues', project_id=project_id, page_number=page, per_page=per_page, **clientopts)
                        all_issues += issues
                        if len(issues) < per_page:
                            break
                        page += 1
                all_issues.sort(key=lambda p: p.id)
                for issue in all_issues:
                    resolutions = []
                    if opts['--open']:
                        resolutions += ['open', 'reopened']
                    if opts['--fixed']:
                        resolutions += ['fixed']
                    if resolutions and issue.resolution.name not in resolutions:
                        continue
                    print '%-5s %-10s %s' % (issue.id, issue.resolution.name, issue.summary)
            if opts['dump'] and opts['issue']:
                try:
                    issue_id = int(opts['<issue-id>'])
                except ValueError:
                    fatal('invalid <issue-id>')
                print soap_service(mc, 'mc_issue_get', issue_id=issue_id, **clientopts)
        except suds.WebFault, e:
            fatal(e)
        except IOError, e:
            fatal('%s: %s' % (mantis_url, e))
    if opts['github']:
        gh = github.Github(github_user, github_password)
        if opts['list'] and opts['repos']:
            repos = gh.get_user().get_repos()
            for repo in repos:
                print repo.name

def fatal(message):
    logging.critical(message)
    sys.exit(1)

def serval_tools_root():
    return os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))

class Config(object):
    mantis_url = None
    mantis_user = None
    mantis_password = None

def read_config_file(path):
    config = Config()
    if os.path.exists(path):
        stat = os.stat(path)
        if stat.st_uid != os.getuid():
            logging.warn("%s exists but is owned by uid %s (should be %s)" % (path, stat.st_uid, getuid()))
        elif stat.st_mode & 0177:
            logging.warn("%s exists but has mode %#o (should be at most 0600)" % (path, stat.st_mode & 0777))
        else:
            try:
                cp = ConfigParser.SafeConfigParser(os.environ)
                cp.readfp(file(path))
                try:
                    config.mantis_url = cp.get('mantis', 'url')
                except ConfigParser.NoOptionError:
                    pass
                try:
                    config.mantis_user = cp.get('mantis', 'user')
                except ConfigParser.NoOptionError:
                    pass
                try:
                    config.mantis_password = cp.get('mantis', 'password')
                except ConfigParser.NoOptionError:
                    pass
                try:
                    config.github_user = cp.get('github', 'user')
                except ConfigParser.NoOptionError:
                    pass
                try:
                    config.github_password = cp.get('github', 'password')
                except ConfigParser.NoOptionError:
                    pass
            except ValueError, e:
                logging.error('%s, line %d: malformed line' % (path, lnum))
            except IOError, e:
                logging.error(e)
    return config

def soap_service(client, method, **kwargs):
    '''This method exists to create a single code path to invoking SOAP services, that can be
    logged.
    '''
    safe_kwargs = dict(kwargs)
    if 'password' in safe_kwargs:
        safe_kwargs['password'] = '***'
    logging.debug('%s(%s)' % (method, ', '.join('%s=%s' % i for i in safe_kwargs.iteritems())))
    return getattr(client.service, method)(**kwargs)

def parse_mantis_xml(f):
    '''This is left-over code from an early attempt to parse the XML exported by Mantis.
    '''
    import lxml.etree
    import lxml.objectify
    tree = lxml.objectify.parse(f)
    root = tree.getroot()
    for issue in root.iterchildren():
        if issue.status != 'closed':
            print issue.id, issue.summary

if __name__ == '__main__':
    main()
